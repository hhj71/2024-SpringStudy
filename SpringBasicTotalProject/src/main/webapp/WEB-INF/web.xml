<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	<!-- 스프링의 기초!
		Tomcat에 의해서 실행
		 1) Controller 등록 : Servlet
		 					 =======
		 					 |URL 주소에 의해 톰캣이 호출
		 					 				====
		 					 				|web.xml / server.xml
		프로그램 제어는 스프링에 의해 작동
					======
					1. 클래스 관리 => 객체 생성 ~ 객체 소멸
									클래스 관리자 (객체 생명주기 관리자)
						1) 객체 생성
							=> 클래스명 / 찾기 위한 구분자
								<bean id=""  class="">
									  =====  ========
									  	|		|Class.forName() => 리플랙션 
									  	|구분자 (ID는 중복될 수 없다)
							=> 생성과 동시에 멤버변수에 대한 초기화가 가능
							   ==================================
							   | DI (의존성 주입) => 스프링에 의해서 값이 설정
							   	 => 객체의 멤버 변수는 private(캡슐화) => 접근이 불가능
							   	 	 => setXxx(), 생성자
							   	 	 	 | setter DI, constructor DI
							   	 	 	 	<bean id="" class=""
							   	 	 	 		p:name="홍길동" => setName("")
									  		/>
									  		class A
									  		{
									  			private String name;
									  			public void setName(String name)
									  			{
									  				this.name=name;
									  			}
									  		}
									  		
									  		<bean id="" class="A"
									  			c:name="심청이"
									  		>
									  		
									  		class A
									  		{
									  			private String name;
									  			public A(String name)
									  			{
									  				this.name=name
									  			}
									  		}
								 DI : 초기화
								 	=> Injection (값을 주입) => 스프링을 통해서 변수값을 지정
								 	=> 객체 생성시 => 메소드 호출이 가능
								 					=> 드라이버 등록
								 					=> 서버 연결
								 					
								 	   객체 소멸시 => 메소드 호출이 가능
								 	   				 => 데이터베이스 연결 해제
								 	   				 => 서버 해제
								 DI
								 
								 
								 
								 기능 수행 : 한개만 메모리 할당 (싱글턴)
								 		   VO는 필요시마다 개발자가 직접 메모리 할당 후 사용(스프링 관리에서 제외)
								 기능별로 저장(스프링)
								 @Component : 일반클래스 ~Manager(Open API)
								 @Repository : DAO
								 @Service : BI (DAO를 통합)
								 @Controller : JSP를 제어하는 모델
								 @RestController : 자바스크립트 (JSON)
								 @ControllerAdvice : Controller 전체에 대한 예외처리
								 =================== 어노테이션이 올라간 클래스만 메모리 할당 (스프링 관리)
								 
								 AOP : 공통 모듈 (반복이 많은 경우) => 반복을 제거
								 		OOP에서는 자동 호출이 불가능 => AOP에서 보완
								 		=> 보안 / 트랜잭션 / 로그파일
								 		=> 반복적으로 출력 (사용자 정의)
								 		
								 		PointCut : 어떤 메소드에 적용 => 메소드 지정
								 		JoinPoint : 메소드 호출할 위치를 지정
								 		 public void display()
								 		   {
								 		   		=====> Before : getConnection()
								 		   		try
								 		   		{
								 		   			============= Around
								 		   				핵심 코딩
								 		   			============= Around
								 		   		}catch(Exception ex)
								 		   		{
								 		   		}
								 		   		finally
								 		   		{
								 		   			After : setAutoCommit(true)
								 		   					disConnection()
								 		   		}
								 		   		return = After-Returning
								 		    }
								 		   ======= +
								 		    Advice 
								 		   
								 		  ** Spring 핵심 개념 : DI / AOP
								 		  					  MVC
								 		  					  Security
								 		  					  
								 		  MVC : DI / AOP를 포함
								 		  MVC => Controller : 요청받아서 결과값을 JSP로 전송
								 		  
								 		  
								 		  
								 		  매개변수 :
								 		  			사용자 전송 
								 		  
								 		  
								 		  오류 
								 		  404 : 파일이 없는 경우
								 		  500 : DAO, 								 
								 
								 		   
									  		
									  		
									  		
									  	  200 : 정상 수행 -> 정상 화면
	 -->
	 <!--  톰캣에 의해 실행 :Servlet -->								
	<servlet>
      <servlet-name>dispatcher</servlet-name>
      <!-- @WebServlet("*.do") -->
      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
      <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/config/application-*.xml</param-value>
      </init-param>
    </servlet>
    <servlet-mapping>
      <servlet-name>dispatcher</servlet-name>
      <url-pattern>*.do</url-pattern>
    </servlet-mapping>
    <!-- 한글 변환 : request를 사용하지 않는다 = 자동으로 한글 변환 처리 -->
    <filter>
      <filter-name>encodingFilter</filter-name>
      <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
      <init-param>
        <param-name>encoding</param-name>
        <param-value>UTF-8</param-value>
      </init-param>
      <init-param>
        <param-name>forceEncoding</param-name>
        <param-value>true</param-value>
      </init-param>
    </filter>
    <filter-mapping>
      <filter-name>encodingFilter</filter-name>
      <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>